[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "importlib.metadata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.metadata",
        "description": "importlib.metadata",
        "detail": "importlib.metadata",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "browser_cookie3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "browser_cookie3",
        "description": "browser_cookie3",
        "detail": "browser_cookie3",
        "documentation": {}
    },
    {
        "label": "http.cookiejar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http.cookiejar",
        "description": "http.cookiejar",
        "detail": "http.cookiejar",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "read_requirements",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def read_requirements(file_path):\n    \"\"\"Lire les packages requis dans le fichier de requirements\"\"\"\n    required_packages = set()\n    with open(file_path, \"r\") as file:\n        for line in file:\n            line = line.strip()\n            if line and not line.startswith(\"#\"):\n                package_name = line.split(\"==\")[0].split(\"<\")[0].split(\">\")[0].strip()\n                required_packages.add(package_name.lower())\n    return required_packages",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "install_modules",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def install_modules(venv_path, requirements_file):\n    \"\"\"Installer les modules requis dans l'environnement virtuel\"\"\"\n    pip_path = (\n        os.path.join(venv_path, \"Scripts\", \"pip\")\n        if sys.platform == \"win32\"\n        else os.path.join(venv_path, \"bin\", \"pip\")\n    )\n    subprocess.check_call([pip_path, \"install\", \"-r\", requirements_file])\ndef check_and_install_modules(required):\n    \"\"\"Vérifier si les modules requis sont installés et les installer si nécessaire\"\"\"",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "check_and_install_modules",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def check_and_install_modules(required):\n    \"\"\"Vérifier si les modules requis sont installés et les installer si nécessaire\"\"\"\n    installed = {\n        pkg.metadata[\"Name\"].lower() for pkg in importlib.metadata.distributions()\n    }\n    missing = required - installed\n    if not missing:\n        return\n    venv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"venv\")\n    requirements_path = os.path.join(",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "select_video_quality",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def select_video_quality(available_formats):\n    \"\"\"\n    Sélectionne le format vidéo selon les préférences pour l'extraction audio:\n    1. 480p (854x480)\n    2. 720p (1280x720)\n    3. 1080p (1920x1080)\n    \"\"\"\n    preferred_heights = [480, 720, 1080]\n    # Filtrer les formats qui contiennent de la vidéo\n    video_formats = [f for f in available_formats if f.get('vcodec') != 'none']",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "modify_youtube_options",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def modify_youtube_options(ydl_opts):\n    \"\"\"\n    Modifie les options yt-dlp pour sélectionner la qualité appropriée\n    \"\"\"\n    def format_selector(ctx):\n        formats = ctx.get('formats', [])\n        format_id, height = select_video_quality(formats)\n        if format_id:\n            print(f\"Qualité vidéo sélectionnée pour extraction audio : {height}p\")\n            return f\"{format_id}+bestaudio\"",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "is_valid_youtube_url",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def is_valid_youtube_url(url):\n    youtube_regex = (\n        r\"(https?://)?(www\\.)?\"\n        r\"(youtube|youtu|youtube-nocookie)\\.(com|be)/\"\n        r\"(watch\\?v=|embed/|v/|.+\\?v=)?([^&=%\\?]{11})\"\n    )\n    return bool(re.match(youtube_regex, url))\ndef is_valid_odysee_url(url):\n    odysee_regex = r\"https?://odysee\\.com/([a-zA-Z0-9\\-_@:]+)\"\n    return bool(re.match(odysee_regex, url))",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "is_valid_odysee_url",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def is_valid_odysee_url(url):\n    odysee_regex = r\"https?://odysee\\.com/([a-zA-Z0-9\\-_@:]+)\"\n    return bool(re.match(odysee_regex, url))\ndef get_url_from_clipboard():\n    print(\"\\nRécupération de l'URL depuis le presse-papier...\")\n    url = pyperclip.paste()\n    if not url:\n        print(\"Le presse-papier est vide.\")\n        return None\n    if is_valid_youtube_url(url) or is_valid_odysee_url(url):",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "get_url_from_clipboard",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def get_url_from_clipboard():\n    print(\"\\nRécupération de l'URL depuis le presse-papier...\")\n    url = pyperclip.paste()\n    if not url:\n        print(\"Le presse-papier est vide.\")\n        return None\n    if is_valid_youtube_url(url) or is_valid_odysee_url(url):\n        print(\"URL valide trouvée.\")\n        return url\n    print(\"L'URL dans le presse-papier n'est pas une URL YouTube ou Odysee valide.\")",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "get_video_id",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def get_video_id(url):\n    \"\"\"Extraire l'ID de la vidéo depuis l'URL\"\"\"\n    print(\"\\nExtraction de l'ID de la vidéo...\")\n    if is_valid_youtube_url(url):\n        video_id = re.search(r\"(?:v=|\\/)([0-9A-Za-z_-]{11}).*\", url)\n        return video_id.group(1) if video_id else None\n    if is_valid_odysee_url(url):\n        response = requests.get(url)\n        soup = BeautifulSoup(response.content, \"html.parser\")\n        return soup.find(\"title\").text",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "download_youtube_audio",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def download_youtube_audio(url):\n    print(\"\\nExtraction de l'audio YouTube...\")\n    local_path = r\"C:\\Users\\dd200\\Downloads\\Video\\Youtube\"\n    os.makedirs(local_path, exist_ok=True)\n    try:\n        # Configuration des options de téléchargement avec les nouveaux paramètres anti-bot\n        ydl_opts = {\n            'format': 'bestaudio/best',\n            'postprocessors': [{\n                'key': 'FFmpegExtractAudio',",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "download_odysee_audio",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def download_odysee_audio(url):\n    print(\"\\nExtraction de l'audio Odysee...\")\n    local_path = r\"C:\\Users\\dd200\\Downloads\\Video\\Odysee\"\n    os.makedirs(local_path, exist_ok=True)\n    try:\n        response = requests.get(url)\n        soup = BeautifulSoup(response.content, \"html.parser\")\n        audio_name = soup.find(\"title\").text + \".mp3\"\n        audio_path = os.path.join(local_path, audio_name)\n        if os.path.exists(audio_path):",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "def main():\n    print(\"\\n===== Début du processus d'extraction audio =====\\n\")\n    url = get_url_from_clipboard()\n    if not url:\n        return\n    video_id = get_video_id(url)\n    if not video_id:\n        print(\"Impossible d'extraire l'ID de la vidéo.\")\n        return\n    print(f\"\\nTraitement de l'audio depuis l'URL : {url}\")",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "script_dir",
        "kind": 5,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "script_dir = os.path.dirname(os.path.abspath(__file__))\nrequirements_path = os.path.join(script_dir, \"requirements.txt\")\nrequired_modules = read_requirements(requirements_path)\ntry:\n    check_and_install_modules(required_modules)\nexcept Exception as e:\n    print(f\"Erreur lors de l'installation des modules : {e}\")\n    sys.exit(1)\n# Importer les modules nécessaires\ntry:",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "requirements_path",
        "kind": 5,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "requirements_path = os.path.join(script_dir, \"requirements.txt\")\nrequired_modules = read_requirements(requirements_path)\ntry:\n    check_and_install_modules(required_modules)\nexcept Exception as e:\n    print(f\"Erreur lors de l'installation des modules : {e}\")\n    sys.exit(1)\n# Importer les modules nécessaires\ntry:\n    import pyperclip # type: ignore",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "required_modules",
        "kind": 5,
        "importPath": "Transcription_python.transcritption_files.download_audio",
        "description": "Transcription_python.transcritption_files.download_audio",
        "peekOfCode": "required_modules = read_requirements(requirements_path)\ntry:\n    check_and_install_modules(required_modules)\nexcept Exception as e:\n    print(f\"Erreur lors de l'installation des modules : {e}\")\n    sys.exit(1)\n# Importer les modules nécessaires\ntry:\n    import pyperclip # type: ignore\n    import yt_dlp # type: ignore",
        "detail": "Transcription_python.transcritption_files.download_audio",
        "documentation": {}
    },
    {
        "label": "read_requirements",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def read_requirements():\n    \"\"\"Lire les packages requis dans le fichier de requirements\"\"\"\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    requirements_path = os.path.join(script_dir, \"requirements.txt\")\n    required_packages = set()\n    with open(requirements_path, \"r\") as file:\n        for line in file:\n            line = line.strip()\n            if line and not line.startswith(\"#\"):\n                package_name = line.split(\"==\")[0].split(\"<\")[0].split(\">\")[0].strip()",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "install_modules",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def install_modules():\n    \"\"\"Installer les modules requis dans l'environnement virtuel\"\"\"\n    script_dir = os.path.dirname(os.path.abspath(__file__))\n    venv_path = os.path.join(script_dir, \"venv\")\n    requirements_path = os.path.join(script_dir, \"requirements.txt\")\n    pip_path = (\n        os.path.join(venv_path, \"Scripts\", \"pip\")\n        if sys.platform == \"win32\"\n        else os.path.join(venv_path, \"bin\", \"pip\")\n    )",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "check_and_install_modules",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def check_and_install_modules():\n    \"\"\"Vérifier si les modules requis sont installés et les installer si nécessaire\"\"\"\n    required = read_requirements()\n    installed = {\n        pkg.metadata[\"Name\"].lower() for pkg in importlib.metadata.distributions()\n    }\n    missing = required - installed\n    if not missing:\n        return\n    install_modules()",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "get_available_video_qualities",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def get_available_video_qualities(available_formats):\n    \"\"\"\n    Récupère les formats vidéo disponibles, limités à 1080p maximum.\n    Retourne une liste de formats triés par qualité.\n    \"\"\"\n    # Définir les résolutions standard à proposer\n    standard_resolutions = [1080, 720, 480]\n    # Préparer les options de qualité à présenter à l'utilisateur\n    quality_options = []\n    # Filtrer les formats qui contiennent de la vidéo (pas seulement audio)",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "is_valid_youtube_url",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def is_valid_youtube_url(url):\n    youtube_regex = (\n        r\"(https?://)?(www\\.)?\"\n        r\"(youtube|youtu|youtube-nocookie)\\.(com|be)/\"\n        r\"(watch\\?v=|embed/|v/|.+\\?v=)?([^&=%\\?]{11})\"\n    )\n    return bool(re.match(youtube_regex, url))\ndef is_valid_odysee_url(url):\n    odysee_regex = r\"https?://odysee\\.com/([a-zA-Z0-9\\-_@:]+)\"\n    return bool(re.match(odysee_regex, url))",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "is_valid_odysee_url",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def is_valid_odysee_url(url):\n    odysee_regex = r\"https?://odysee\\.com/([a-zA-Z0-9\\-_@:]+)\"\n    return bool(re.match(odysee_regex, url))\ndef is_valid_url(url):\n    \"\"\"Vérifie si la chaîne est une URL valide\"\"\"\n    url_regex = r\"^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$\"\n    return bool(re.match(url_regex, url))\ndef get_url_from_clipboard():\n    \"\"\"Récupère et valide l'URL depuis le presse-papier\"\"\"\n    print(\"\\nRécupération de l'URL depuis le presse-papier...\")",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "is_valid_url",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def is_valid_url(url):\n    \"\"\"Vérifie si la chaîne est une URL valide\"\"\"\n    url_regex = r\"^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$\"\n    return bool(re.match(url_regex, url))\ndef get_url_from_clipboard():\n    \"\"\"Récupère et valide l'URL depuis le presse-papier\"\"\"\n    print(\"\\nRécupération de l'URL depuis le presse-papier...\")\n    url = pyperclip.paste()\n    if not url:\n        print(\"Le presse-papier est vide.\")",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "get_url_from_clipboard",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def get_url_from_clipboard():\n    \"\"\"Récupère et valide l'URL depuis le presse-papier\"\"\"\n    print(\"\\nRécupération de l'URL depuis le presse-papier...\")\n    url = pyperclip.paste()\n    if not url:\n        print(\"Le presse-papier est vide.\")\n        return None\n    if not is_valid_url(url):\n        print(\"Le contenu du presse-papier n'est pas une URL valide.\")\n        return None",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "download_youtube_video",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def download_youtube_video(url):\n    print(\"\\nAnalyse de la vidéo YouTube...\")\n    local_path = r\"C:\\Users\\dd200\\Downloads\\Video\\Youtube\"\n    # Add cookies file if available\n    cookies_file = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \"cookies.txt\"\n    )\n    use_cookies = os.path.exists(cookies_file)\n    # Options pour l'extraction des informations\n    info_opts = {",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "download_odysee_video",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def download_odysee_video(url):\n    print(\"\\nTéléchargement de la vidéo Odysee...\")\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, \"html.parser\")\n    local_path = r\"C:\\Users\\dd200\\Downloads\\Video\\Odysee\"\n    video_name = soup.find(\"title\").text + \".mp4\"\n    video_path = os.path.join(local_path, video_name)\n    # Étape 1 : Vérifier si le fichier existe déjà\n    if os.path.exists(video_path):\n        print(",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "download_generic_video",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def download_generic_video(url):\n    \"\"\"Télécharge une vidéo depuis une URL générique\"\"\"\n    print(\"\\nTéléchargement de la vidéo depuis une URL générique...\")\n    local_path = r\"C:\\Users\\dd200\\Downloads\\Video\\Generic\"\n    os.makedirs(local_path, exist_ok=True)  # Crée le dossier s'il n'existe pas\n    try:\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36\"\n        }\n        response = requests.get(url, headers=headers)",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.download_video",
        "description": "Transcription_python.transcritption_files.download_video",
        "peekOfCode": "def main():\n    print(\"\\n===== Début du processus =====\\n\")\n    result = get_url_from_clipboard()\n    if not result:\n        return\n    type_url, url = result\n    print(f\"\\nTraitement de la vidéo depuis l'URL : {url}\")\n    try:\n        if type_url == \"youtube\":\n            download_youtube_video(url)",
        "detail": "Transcription_python.transcritption_files.download_video",
        "documentation": {}
    },
    {
        "label": "cookies",
        "kind": 5,
        "importPath": "Transcription_python.transcritption_files.export_cookies",
        "description": "Transcription_python.transcritption_files.export_cookies",
        "peekOfCode": "cookies = browser_cookie3.chrome(domain_name='.youtube.com')\ncookie_jar = http.cookiejar.MozillaCookieJar('cookies.txt')\nfor cookie in cookies:\n    cookie_jar.set_cookie(cookie)\ncookie_jar.save()",
        "detail": "Transcription_python.transcritption_files.export_cookies",
        "documentation": {}
    },
    {
        "label": "cookie_jar",
        "kind": 5,
        "importPath": "Transcription_python.transcritption_files.export_cookies",
        "description": "Transcription_python.transcritption_files.export_cookies",
        "peekOfCode": "cookie_jar = http.cookiejar.MozillaCookieJar('cookies.txt')\nfor cookie in cookies:\n    cookie_jar.set_cookie(cookie)\ncookie_jar.save()",
        "detail": "Transcription_python.transcritption_files.export_cookies",
        "documentation": {}
    },
    {
        "label": "read_requirements",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def read_requirements(file_path):\n    \"\"\"Lire les packages requis dans le fichier de requirements\"\"\"\n    required_packages = set()\n    with open(file_path, 'r') as file:\n        for line in file:\n            line = line.strip()\n            if line and not line.startswith('#'):\n                package_name = line.split('==')[0].split('<')[0].split('>')[0].strip()\n                required_packages.add(package_name.lower())\n    return required_packages",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "install_modules",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def install_modules(venv_path, requirements_file):\n    \"\"\"Installer les modules requis dans l'environnement virtuel\"\"\"\n    pip_path = os.path.join(venv_path, 'Scripts', 'pip') if sys.platform == 'win32' else os.path.join(venv_path, 'bin', 'pip')\n    subprocess.check_call([pip_path, 'install', '-r', requirements_file])\ndef check_and_install_modules(required):\n    \"\"\"Vérifier si les modules requis sont installés et les installer si nécessaire\"\"\"\n    installed = {pkg.metadata['Name'].lower() for pkg in importlib.metadata.distributions()}    \n    missing = required - installed\n    if not missing:\n        return",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "check_and_install_modules",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def check_and_install_modules(required):\n    \"\"\"Vérifier si les modules requis sont installés et les installer si nécessaire\"\"\"\n    installed = {pkg.metadata['Name'].lower() for pkg in importlib.metadata.distributions()}    \n    missing = required - installed\n    if not missing:\n        return\n    venv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'venv')    \n    requirements_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'requirements.txt')\n    install_modules(venv_path, requirements_path)\n    print(\"Modules installés avec succès dans l'environnement virtuel.\")",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "is_valid_youtube_url",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def is_valid_youtube_url(url):\n    youtube_regex = r'(https?://)?(www\\.)?' \\\n                    r'(youtube|youtu|youtube-nocookie)\\.(com|be)/' \\\n                    r'(watch\\?v=|embed/|v/|.+\\?v=)?([^&=%\\?]{11})'\n    return bool(re.match(youtube_regex, url))\ndef is_valid_odysee_url(url):\n    odysee_regex = r'https?://odysee\\.com/([a-zA-Z0-9\\-_@:]+)'\n    return bool(re.match(odysee_regex, url))\ndef get_url_from_clipboard():\n    print(\"\\nRécupération de l'URL depuis le presse-papier...\")",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "is_valid_odysee_url",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def is_valid_odysee_url(url):\n    odysee_regex = r'https?://odysee\\.com/([a-zA-Z0-9\\-_@:]+)'\n    return bool(re.match(odysee_regex, url))\ndef get_url_from_clipboard():\n    print(\"\\nRécupération de l'URL depuis le presse-papier...\")\n    url = pyperclip.paste()\n    if not url:\n        print(\"Le presse-papier est vide.\")\n        return None\n    if is_valid_youtube_url(url) or is_valid_odysee_url(url):",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "get_url_from_clipboard",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def get_url_from_clipboard():\n    print(\"\\nRécupération de l'URL depuis le presse-papier...\")\n    url = pyperclip.paste()\n    if not url:\n        print(\"Le presse-papier est vide.\")\n        return None\n    if is_valid_youtube_url(url) or is_valid_odysee_url(url):\n        print(\"URL valide trouvée.\")\n        return url\n    print(\"L'URL dans le presse-papier n'est pas une URL YouTube ou Odysee valide.\")",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "get_video_id",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def get_video_id(url):\n    \"\"\"Extraire l'ID de la vidéo depuis l'URL\"\"\"\n    print(\"\\nExtraction de l'ID de la vidéo...\")\n    if is_valid_youtube_url(url):\n        video_id = re.search(r'(?:v=|\\/)([0-9A-Za-z_-]{11}).*', url)\n        return video_id.group(1) if video_id else None\n    if is_valid_odysee_url(url):\n        response = requests.get(url)\n        soup = BeautifulSoup(response.content, 'html.parser')\n        return soup.find('title').text",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "download_youtube_audio",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def download_youtube_audio(url):\n    print(\"\\nTéléchargement de l'audio YouTube...\")\n    ydl_opts = {\n        'format': 'bestaudio/best',\n        'postprocessors': [{\n            'key': 'FFmpegExtractAudio',\n            'preferredcodec': 'mp3',\n            'preferredquality': '192',\n        }],\n        'outtmpl': 'temp_audio.%(ext)s',",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "download_odysee_video",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def download_odysee_video(url):\n    print(\"\\nTéléchargement de la vidéo Odysee...\")\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    script_tag = soup.find('script', type='application/ld+json')\n    json_content = json.loads(script_tag.string)\n    video_url = json_content.get('contentUrl')\n    response = requests.get(video_url, stream=True)\n    video_path = 'temp_video.mp4'\n    with open(video_path, 'wb') as f:",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "convert_video_to_audio",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def convert_video_to_audio(video_path):\n    print(\"\\nConversion de la vidéo en audio...\")\n    audio_path = 'temp_audio.mp3'\n    audio = AudioSegment.from_file(video_path)\n    audio.export(audio_path, format='mp3')\n    print(\"Conversion terminée.\")\n    return audio_path\ndef download_odysee_audio(url):\n    video_path = download_odysee_video(url)\n    response = requests.get(url)",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "download_odysee_audio",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def download_odysee_audio(url):\n    video_path = download_odysee_video(url)\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    video_title = soup.find('title').text\n    audio_path = convert_video_to_audio(video_path)\n    # os.remove(video_path)\n    return audio_path, video_title\ndef transcribe_audio(audio_path):\n    \"\"\"Transcrire l'audio en texte\"\"\"",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "transcribe_audio",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def transcribe_audio(audio_path):\n    \"\"\"Transcrire l'audio en texte\"\"\"\n    if not audio_path:\n        return None\n    try:\n        print(\"\\nChargement du modèle de transcription...\")\n        model = whisper.load_model(\"small\")\n        # model = whisper.load_model(\"tiny\")\n        print(\"\\nTranscription de l'audio en cours...\")\n        result = model.transcribe(audio_path, task=\"transcribe\")",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "detect_language",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def detect_language(text, verbose=True):\n    if verbose:\n        print(\"\\nDétection de la langue...\")\n    translator = Translator()\n    try:\n        detected = translator.detect(text[:1000])\n        if verbose:\n            print(f\"Langue détectée : {detected.lang}\")\n        return detected.lang\n    except Exception as e:",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "translate_text",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def translate_text(text, target_lang=\"fr\"):\n    if not text:\n        return None\n    source_lang = detect_language(text, True)\n    if source_lang == target_lang:\n        print(f\"Le texte est déjà en {target_lang}. Aucune traduction nécessaire.\")\n        return text\n    print(\"\\nTraduction du texte en cours...\")\n    translator = Translator()\n    max_chunk_size = 5000",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "save_transcription",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def save_transcription(text, filename):\n    \"\"\"Sauvegarder la transcription dans un fichier\"\"\"\n    if not text:\n        print(\"Aucun texte à sauvegarder.\")\n        return\n    parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    filename_safe = re.sub(r'[^\\w\\s.-]', '', filename)\n    full_path = os.path.join(parent_dir, filename_safe)\n    with open(full_path, 'w', encoding='utf-8') as f:\n        f.write(text)",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "generate_translated_file",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def generate_translated_file(transcription ,detected_lang, video_id, video_title):\n    \"\"\"Générer le fichier traduit\"\"\"\n    target_lang = {\"fr\": \"en\", \"en\": \"fr\"}\n    translated_text = translate_text(transcription, target_lang[detected_lang])\n    if translated_text:\n        translated_text = re.sub(r'([.!?...])(\\S)', r'\\1 \\2', translated_text)\n        filename_translated = f\"{video_id}_{video_title[:30]}_{target_lang[detected_lang].upper()}.txt\"\n        filename_translated = re.sub(r'[^\\w\\-_\\. ]', '_', filename_translated)\n        print(\"filename_translated\", filename_translated)\n        save_transcription(translated_text, filename_translated)",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "def main():\n    print(\"\\n===== Début du processus =====\\n\")\n    url = get_url_from_clipboard()\n    if not url:\n        return\n    video_id = get_video_id(url)\n    if not video_id:\n        print(\"Impossible d'extraire l'ID de la vidéo.\")\n        return\n    print(f\"\\nTraitement de la vidéo depuis l'URL : {url}\")",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "script_dir",
        "kind": 5,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "script_dir = os.path.dirname(os.path.abspath(__file__))\nrequirements_path = os.path.join(script_dir, 'requirements.txt')\nrequired_modules = read_requirements(requirements_path)\ntry:\n    check_and_install_modules(required_modules)\nexcept Exception as e:\n    print(f\"Erreur lors de l'installation des modules : {e}\")\n    sys.exit(1)\n# Importer les modules nécessaires\ntry:",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "requirements_path",
        "kind": 5,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "requirements_path = os.path.join(script_dir, 'requirements.txt')\nrequired_modules = read_requirements(requirements_path)\ntry:\n    check_and_install_modules(required_modules)\nexcept Exception as e:\n    print(f\"Erreur lors de l'installation des modules : {e}\")\n    sys.exit(1)\n# Importer les modules nécessaires\ntry:\n    import pyperclip",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    },
    {
        "label": "required_modules",
        "kind": 5,
        "importPath": "Transcription_python.transcritption_files.transcription_script",
        "description": "Transcription_python.transcritption_files.transcription_script",
        "peekOfCode": "required_modules = read_requirements(requirements_path)\ntry:\n    check_and_install_modules(required_modules)\nexcept Exception as e:\n    print(f\"Erreur lors de l'installation des modules : {e}\")\n    sys.exit(1)\n# Importer les modules nécessaires\ntry:\n    import pyperclip\n    import json",
        "detail": "Transcription_python.transcritption_files.transcription_script",
        "documentation": {}
    }
]